import { NextResponse } from "next/server";
import {
  verifyKey,
  InteractionType,
  InteractionResponseType,
} from "discord-interactions";

export const runtime = "edge";

export async function POST(req: Request) {
  try {
    const PUBLIC_KEY = process.env.DISCORD_PUBLIC_KEY!;
    const signature = req.headers.get("x-signature-ed25519");
    const timestamp = req.headers.get("x-signature-timestamp");
    if (!PUBLIC_KEY || !signature || !timestamp) {
      return new NextResponse("Bad request", { status: 400 });
    }

    // –°—ã—Ä–æ–µ —Ç–µ–ª–æ –¥–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const body = await req.text();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
    const isValid = await verifyKey(body, signature, timestamp, PUBLIC_KEY);
    if (!isValid) {
      return new NextResponse("invalid request signature", { status: 401 });
    }

    const json = JSON.parse(body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è URL –≤ Dev Portal
    if (json.type === InteractionType.PING) {
      return NextResponse.json({ type: InteractionResponseType.PONG });
    }

    // Slash-–∫–æ–º–∞–Ω–¥—ã
    if (json.type === InteractionType.APPLICATION_COMMAND) {
      const name = json.data?.name;

      if (name === "ping") {
        return NextResponse.json({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: { content: "Pong! üèì" },
        });
      }

      if (name === "help") {
        return NextResponse.json({
          type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
          data: {
            content: [
              "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**",
              "‚Ä¢ `/ping` ‚Äî –æ—Ç–≤–µ—á–∞–µ—Ç `Pong!`.",
              "‚Ä¢ `/help` ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            ].join("\n"),
          },
        });
      }

      return NextResponse.json({
        type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
        data: { content: "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." },
      });
    }

    return new NextResponse("Unhandled interaction type", { status: 400 });
  } catch (e: any) {
    const msg = e?.stack || e?.message || String(e);
    return NextResponse.json({
      type: InteractionResponseType.CHANNEL_MESSAGE_WITH_SOURCE,
      data: { content: `DEV error:\n${msg}`, flags: 64 },
    });
  }
}